[21.07.04]
회전에 대해서 고민하고 간단하게 보드판을 구현하였다.
[21.09.26]
보드판 위에 출력을 할 수 있도록 printBoard함수를 업데이트 했으며 goto_xy함수도 개발했다.
또한, 블록 생성 함수인 createBlock의 기초를 다졌다.
다음 개발에는 블록 배열을 어떻게 저장해놓을 것인지, 어떻게 활용할 것인지 고민할 필요가 있다.

[21.09.28]
각 미노의 초기값(모양)을 settingBlock()함수로 초기화 할 수 있도록 한 뒤 settingBoard에 추가하였다.
그리고, 현재 제어중인 블록이 없을 경우 무작위 블록을 생성하는 createBlock()함수를 완성하였다.
다음 개발에는 일정 시간이 지날 때 마다 블록이 내려오도록 하는 기능을 추가할 필요가 있다.
추가적으로, 알고리즘을 좀 더 연구한 뒤 개발에 들어갈 필요성이 느껴진다.

[21.09.29]
본격적으로 블록을 제어하기 위해 block값을 담은 blockQueue를 추가하였고, clock()함수를 이용해 일정 시간마다 블록이 떨어지도록 시간과 관련된 변수를 추가하였다.
fallingBlock()함수를 통해 일정 시간마다 소프트 드랍을 하게 하였고, softDrop()함수를 추가하여 소프트드랍이 가능하게 하였다.
또한, 블록 설치를 위해 simulationBoard를 추가하는 것을 고민해보았다.
일정 시간마다 블록이 떨어지는 것은 구현했으나, 블록 바로 밑 칸에 블록이 존재하는 경우 블록이 설치하는 것을 아직 구현하지 못했다.
다음 개발에는 블록 설치에 대해 구현할 필요가 있다.

누적 개발 시간 : 1h 7m

[21.10.05]
블록 설치를 메인으로 구현에 성공하였다.
이를 위해 블록의 상하좌우 이동을 미리 시뮬레이션해서 가능한지 불가능한지 판단하는 blockMoveSimulation함수를 구현하였고
4칸의 블록을 한번에 움직이기 위해 preloadBlockQueue 변수와 reloadBlock함수를 추가하였다.
이를 바탕으로 소프트 드랍 함수를 blockMoveSimulation함수와 reloadBlock함수로 더욱 직관성있고 효율적으로 변화시켰다.
또한, 소프트 드랍 함수에 블록 설치와 관련된 파트를 추가하여 블록 설치를 구현하였다.
이미 설치된 블록과 기존에 조종하던 블록에 차이점을 주기 위해 코드값 : 기존 블록코드 + 7를 설치된 블록의 코드로 지정하였다.

다음 개발에는 srand값의 시드값이 초당 바뀌는 한계점 때문에 같은 블록이 지속해서 나오는 경우를 수정해야한다.
또한, 실시간으로 입력 받는 것을 추가하여 좌우 방향키로 블록을 움직일 수 있도록 구현할 것이다.

누적 개발시간 : 2h 17m

[21.10.09]
블록 회전을 메인으로 구현에 성공하였다.
이를 위해 기존 블록을 4*4배열에 저장하던 것을 (1,1)기준으로 몇칸 떨어져 있는가로 저장하였고
이를 통해 회전을 구현할 수 있었다.
다음 회전 블록과 기존 회전 블록의 x, y좌표의 차이를 더하여 블록 하나하나를 이동시켜 마치 회전하는 것 처럼 구현하였고 성공적이었다.
뿐만 아니라 이동, 회전, 자동 낙하의 딜레이 시간을 분리함으로써 더욱 매끄러운 조작이 가능하도록 하였다.

다음 개발에는 한줄을 채우면 그 줄이 터지는 기능, 하드 드롭을 추가하고 코드를 최적화하는 것을 목표로 하도록 한다.
그리고, 가능하면 next, hold를 만들도록 한다.
또한, 보드판의 위쪽 크기를 약간 늘리도록 한다.

누적 개발시간 : 4h 15m

[21.10.11]
테트리스의 모든 기본 요소를 구현하는데 성공하였다.
블록을 움직이고 회전시킬 수 있으며, 소프트 드랍과 하드 드랍이 모두 가능하고 한 줄을 모두 채울 시 줄이 제거된다.
40줄을 채우면 클리어하고, 플레이 시간도 출력된다.

다만, 아직까지는 매끄러운 조작이 되지 않으며
블록이 너무 무작위로 나와 심할 경우 같은 블록이 4번 나오는 경우도 있다. (이는 rand()함수의 한계로 보인다.)
블록 착지지점이 미리 보이지 않아 어디에 블록이 놓이는지 정확하게 파악하기 어려우며
next, hold가 없어 게임 진행도 불편하다.
UI도 불편하여 게임하는동안 시간을 파악하기 어렵다.
블록마다 특유의 색이 없어 시각적으로 단조롭다.
회전의 융통성이 없어 부드러운 회전이 불가능하다.

다음 개발에는 이러한 단점들을 보안하여 여러가지 기능을 추가해 개발해보도록 하자.
또한, 중반부터 계획성없이 개발을 진행하여 코드가 많이 깔끔하지 못한면이 있기 때문에
최적화를 한번 하고 기획안을 수정하자.

어쨋든, 상상만하던 테트리스 개발을 성공했으니 기뻐하자!

누적 개발시간 : 5h 42m
하지만, 측정되지 않은 시간을 포함하면 10시간이 넘는 것으로 추측

[21.11.05]
호국훈련이 끝난 후 다시 시작하는 테트리스 개발이었다.
오랜만에 해서 그런지 머리가 약간 안돌아갔지만 꽤 나쁘지 않게 개발이 진전된 기분이다.

일단, 7bag / next / hold를 구현했다.
완전 무작위가 아닌 7bag에 근거하여 블록이 생성되도록했으며
next, hold또한 구현했지만, 아직 시각적으로 출력하는 것은 구현되지 못하였다.

현재 개선해야할 점을 분석해본 결과
1. 7bag
2. hold, next
3. 고스트 추가
4. 조작 개선 (연속 입력 방지)
5. SRS
6. DAS
7. 인피니티
8. 가독성 증가
정도가 있으며 그 중 7bag는 구현했고 hold, next는 구현중에 있다.

다음 개발에는 hold, next를 시각적으로 표현한 뒤
고스트를 개발하면서 블록 색깔 추가도 구현해보도록하자.
그 후 시간이 남을텐데 코드 최적화 및 기획안 수정을 하도록 하자.

누적 개발시간 : 6h 48m

[21.11.06]
next, hold를 완벽하게 구현했다!
tetr.io에 기반하여 hold를 보드 왼쪽, next를 홀드 오른쪽에 배치하였고
버그없이 온전하게 시각적으로 표시하는데 성공했다.

간단한 구현이었지만 기존 코드가 난잡하고 계획성이 없다는 점
좌표체계가 제대로 잡혀있지 않다는 점에서 생각보다 너무 오랜시간이 걸렸다.

이제 더 이상은 뒤로 미루기는 힘들 것 같다.
다음 개발에는 코드 최적화 및 기획안 수정을 하자

누적 개발시간 : 7h 56m